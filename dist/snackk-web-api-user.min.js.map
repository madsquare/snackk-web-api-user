{
  "version": 3,
  "file": "snackk-web-api-user.min.js",
  "sources": [
    "../almond.js",
    "user.js"
  ],
  "names": [],
  "mappings
  "sourcesContent": [
    "/**\n * almond 0.1.2 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        aps = [].slice,\n        main, req;\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {},\n            nameParts, nameSegment, mapValue, foundMap,\n            foundI, foundStarMap, starI, i, j, part;\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that \"directory\" and not name of the baseName's\n                //module. For instance, baseName of \"one/two/three\", maps to\n                //\"one/two/three.js\", but we want the directory, \"one/two\" for\n                //this normalization.\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n\n                name = baseParts.concat(name.split(\"/\"));\n\n                //start trimDots\n                for (i = 0; (part = name[i]); i++) {\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            return true;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (waiting.hasOwnProperty(name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!defined.hasOwnProperty(name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    function makeMap(name, relName) {\n        var prefix, plugin,\n            index = name.indexOf('!');\n\n        if (index !== -1) {\n            prefix = normalize(name.slice(0, index), relName);\n            name = name.slice(index + 1);\n            plugin = callDep(prefix);\n\n            //Normalize according\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            p: plugin\n        };\n    }\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    main = function (name, deps, callback, relName) {\n        var args = [],\n            usingExports,\n            cjsModule, depName, ret, map, i;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (typeof callback === 'function') {\n\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i++) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = makeRequire(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = defined[name] = {};\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = {\n                        id: name,\n                        uri: '',\n                        exports: defined[name],\n                        config: makeConfig(name)\n                    };\n                } else if (defined.hasOwnProperty(depName) || waiting.hasOwnProperty(depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else if (!defining[depName]) {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback.apply(defined[name], args);\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                    cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync) {\n        if (typeof deps === \"string\") {\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 15);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        config = cfg;\n        return req;\n    };\n\n    define = function (name, deps, callback) {\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        waiting[name] = [name, deps, callback];\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\ndefine(\"../almond\", function(){});\n\n",
    "(function() {\n  define('user',['server'], function(server) {\n    var User, _ERROR_CODE, _callbackObj, _user;\n    _user = null;\n    _ERROR_CODE = {\n      DUPLICATED: 'error_duplicated',\n      INVALID: 'error_invalid',\n      UN_KNOWN: 'error_unknown'\n    };\n    _callbackObj = {\n      success: (function(_this) {\n        return function(res) {\n          if (callback && callback.success) {\n            return callback.success(res);\n          }\n        };\n      })(this),\n      error: (function(_this) {\n        return function(er) {\n          if (callback && callback.error) {\n            return callback.error(er);\n          }\n        };\n      })(this),\n      complete: function() {\n        if (callback && callback.complete) {\n          return callback.complete();\n        }\n      }\n    };\n    User = {\n\n      /*\n       * set user\n       * @param {User} user  :user object\n       */\n      setUser: function(user) {\n        return _user = user;\n      },\n\n      /*\n       * 회원가입\n       * @param  {User}   user     : user object\n       * @param  {Function} callback \n       * @param  {Object} options  \n       * @return {ajax}\n       */\n      registUser: function(user, callback, options) {\n        if (!options) {\n          options = {};\n        }\n        return server.request(server.TAG.user.user, _.assign({\n          'data': _.assign({\n            'user': user\n          }, options)\n        }, {\n          'type': 'POST'\n        }, callback));\n      },\n\n      /*\n       * 로그인 provider추가.\n       * @param {String}   sns      : sns 종류.\n       * @param {String}   token    : sns access token\n       * @param {Function} callback\n       */\n      addProvider: function(sns, token, callback) {\n        var tag;\n        tag = server.TAG.user.provider.replace(':us_no', _user.us_no).replace(':provider', sns);\n        return server.request(tag, _.aasign({\n          'type': 'POST',\n          'data': {\n            'token': token\n          }\n        }, callback));\n      },\n\n      /*\n       * 내 정보 반환\n       * @param  {Object}   filter   : http://api.snackk.tv/api/user.html#GET /user\n       * @param  {Function} callback \n       * @param  {Object}   options  \n       * @return {ajax}\n       */\n      loadMe: function(callback, options) {\n        if (!options) {\n          options = {};\n        }\n        return server.request(server.TAG.user.user, _.assign({\n          'data': options\n        }, callback));\n      },\n\n      /*\n       * 해당 유저의 디폴트 이미지 로드.\n       * @param  {Function} callback \n       * @return {ajax}\n       */\n      loadDefaultPicture: function(callback) {\n        var tag;\n        tag = server.TAG.user.profileDefault.replace(':us_no', _user.us_no);\n        return server.request(tag, callback);\n      },\n\n      /*\n       * 내 정보 수정.\n       * 프로필은 제외됨.\n       * @param  {User}     user     \n       * @param  {Function} callback \n       * @param  {Object}   options  \n       * @return {ajax}\n       */\n      updateUser: function(user, callback, options) {\n        var tag;\n        if (!_user) {\n          console.log('updateUser] user object is empty.');\n          return;\n        }\n        if (!options) {\n          options = {};\n        }\n        tag = server.TAG.user.aUser.replace(':us_no', _user.us_no);\n        return server.request(tag, _.assign({\n          'type': 'PUT',\n          'data': _.assign({\n            'user': user\n          }, options)\n        }, callback));\n      },\n\n      /*\n       * 프로필 사진 수정.\n       * @param  {File}     fileInput [description]\n       * @param  {Function} callback  [description]\n       * @return {[type]}             [description]\n       */\n      updateProfile: function(fileInput, callback) {\n        var tag;\n        tag = server.TAG.user.profile.replace(':us_no', _user.us_no);\n        return server.request(tag, _.assign({\n          'fileInput': fileInput,\n          'dataType': 'iframe json'\n        }, callback));\n      },\n\n      /*\n       * 비밀번호 변경.\n       * @param  {String}   oldPasswd : 이전 비밀번호 입력.(optional)\n       * @param  {String}   newPasswd : 새 비밀번호.\n       * @param  {Function} callback \n       * @param  {Object}   options  \n       * @return {ajax}\n       */\n      updatePassword: function(oldPasswd, newPasswd, callback, options) {\n        var nonce, oldPasswdObj, tag, userObj;\n        if (oldPasswd) {\n          oldPasswdObj = {\n            'passwd': oldPasswd\n          };\n          nonce = {\n            'nonce': {\n              'isPasswdEdit': 1\n            }\n          };\n        } else {\n          oldPasswdObj = {};\n          nonce = {};\n        }\n        if (!options) {\n          options = {};\n        }\n        userObj = _.assign({\n          'new_passwd': newPassWd\n        }, oldPasswdObj);\n        tag = server.TAG.user.aUser.replace(':us_no', _user.us_no);\n        return server.request(tag, _.aasign({\n          'type': 'PUT',\n          'data': _.assign({\n            'user': userObj\n          }, nonce, options)\n        }, callback));\n      },\n\n      /*\n       * 회원탈퇴.\n       * @param  {Function} callback\n       * @return {ajax}\n       */\n      deleteUser: function(callback) {\n        var tag;\n        if (!_user) {\n          console.log('deleteUser] user object is empty.');\n          return;\n        }\n        tag = server.TAG.user.aUser.replace(':us_no', _user.us_no);\n        return server.request(tag, _.assign({\n          'type': 'DELETE'\n        }, callback));\n      },\n\n      /*\n       * login provider 삭제.\n       * @param  {String}   sns      : 삭제할 sns 종류.\n       * @param  {Function} callback \n       * @return {ajax}\n       */\n      deleteProvider: function(sns, callback) {\n        var tag;\n        tag = server.TAG.user.provider.replace(':us_no', _user.us_no).replace(':provider', sns);\n        return server.request(tag, _.assign({\n          'type': 'DELETE'\n        }, callback));\n      },\n\n      /*\n       * 프로필 이미지 삭제.\n       * @param  {Function} callback \n       * @return {ajax}\n       */\n      deletePicture: function(callback) {\n        var tag;\n        tag = server.TAG.user.profile.replace(':us_no', _user.us_no);\n        return server.request(tag, _.assign({\n          'type': 'DELETE'\n        }, callback));\n      },\n\n      /*\n       * 인증 메일 발송.\n       * @param  {Function} callback \n       * @return {ajax}\n       */\n      sendEmail: function(callback) {\n        var tag;\n        tag = server.TAG.user.emailPost;\n        return server.request(tag, callback);\n      },\n\n      /*\n       * email 중복 및 유효성 검사.\n       * @param  {String}   email    \n       * @param  {Function} callback\n       * @return {ajax}\n       */\n      validateEmail: function(email, callback) {\n        var filter, xhr;\n        if (!callback || !email) {\n          console.error('validateEmail] email or callback is not defined.');\n          return;\n        }\n        if (!email.match(/^(([a-zA-Z]|[0-9])|([-]|[_]|[.]))+[@](([a-zA-Z0-9])|([-])){2,63}[.](([a-zA-Z0-9]){2,63})+$/gi)) {\n          callback('ERROR', _ERROR_CODE.INVALID);\n        }\n        xhr && xhr.abort();\n        filter = {\n          'filter': {\n            'email': email\n          }\n        };\n        return xhr = this.loadUser(filter, {\n          success: (function(_this) {\n            return function(res) {\n              return callback('ERROR', _ERROR_CODE.DUPLICATED);\n            };\n          })(this),\n          error: (function(_this) {\n            return function(er) {\n              if (er.code === 404) {\n                return callback('SUCCESS');\n              } else {\n                return callback('ERROR', _ERROR_CODE.UN_KNOWN);\n              }\n            };\n          })(this),\n          complete: (function(_this) {\n            return function() {\n              return xhr = null;\n            };\n          })(this)\n        });\n      }\n    };\n    return User;\n  });\n\n}).call(this);\n\n//# sourceMappingURL=user.js.map\n;\n"
  ]
}